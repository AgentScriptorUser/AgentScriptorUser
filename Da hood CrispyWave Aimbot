-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local MainEvent = ReplicatedStorage:WaitForChild("MainEvent")
local LocalPlayer = Players.LocalPlayer
local UIS = game:GetService("UserInputService")

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui", game.CoreGui)
screenGui.Name = "AimbotGUI"
screenGui.ResetOnSpawn = false

-- Frame
local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 200, 0, 190)
frame.Position = UDim2.new(0.02, 0, 0.3, 0)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = false

-- Title
local title = Instance.new("TextLabel", frame)
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundTransparency = 1
title.Text = "CrispyWave Aimbot"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.GothamBold
title.TextSize = 18

-- Target Input
local targetBox = Instance.new("TextBox", frame)
targetBox.PlaceholderText = "Enter target name"
targetBox.Size = UDim2.new(1, -20, 0, 30)
targetBox.Position = UDim2.new(0, 10, 0, 40)
targetBox.Text = ""
targetBox.TextColor3 = Color3.fromRGB(0, 0, 0)
targetBox.Font = Enum.Font.Gotham
targetBox.TextSize = 14
targetBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

-- Shoot Button
local shootButton = Instance.new("TextButton", frame)
shootButton.Size = UDim2.new(1, -20, 0, 30)
shootButton.Position = UDim2.new(0, 10, 0, 80)
shootButton.Text = "Shoot Head"
shootButton.TextColor3 = Color3.fromRGB(255, 255, 255)
shootButton.Font = Enum.Font.GothamBold
shootButton.TextSize = 16
shootButton.BackgroundColor3 = Color3.fromRGB(80, 80, 255)

-- Health Label
local healthLabel = Instance.new("TextLabel", frame)
healthLabel.Size = UDim2.new(1, -20, 0, 20)
healthLabel.Position = UDim2.new(0, 10, 0, 120)
healthLabel.BackgroundTransparency = 1
healthLabel.Text = "Health: N/A"
healthLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
healthLabel.Font = Enum.Font.Gotham
healthLabel.TextSize = 14
healthLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Health Bar Background
local healthBarBG = Instance.new("Frame", frame)
healthBarBG.Size = UDim2.new(1, -20, 0, 10)
healthBarBG.Position = UDim2.new(0, 10, 0, 145)
healthBarBG.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
healthBarBG.BorderSizePixel = 0

-- Health Bar Fill
local healthBarFill = Instance.new("Frame", healthBarBG)
healthBarFill.Size = UDim2.new(1, 0, 1, 0)
healthBarFill.Position = UDim2.new(0, 0, 0, 0)
healthBarFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
healthBarFill.BorderSizePixel = 0

-- Distance Label
local distanceLabel = Instance.new("TextLabel", frame)
distanceLabel.Size = UDim2.new(1, -20, 0, 20)
distanceLabel.Position = UDim2.new(0, 10, 0, 165)
distanceLabel.BackgroundTransparency = 1
distanceLabel.Text = "Distance: N/A"
distanceLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
distanceLabel.Font = Enum.Font.Gotham
distanceLabel.TextSize = 14
distanceLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Dragging
local dragging, dragInput, dragStart, startPos
local function updateInput(input)
	local delta = input.Position - dragStart
	frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end
frame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = frame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then dragging = false end
		end)
	end
end)
frame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)
UIS.InputChanged:Connect(function(input)
	if input == dragInput and dragging then updateInput(input) end
end)

-- Get player by username or display name
local function getTargetPlayer(name)
	name = name:lower()
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			local usernameMatch = player.Name:lower():sub(1, #name) == name
			local displayMatch = player.DisplayName:lower():sub(1, #name) == name
			if usernameMatch or displayMatch then
				return player
			end
		end
	end
	return nil
end

-- Live health and distance tracker
local currentHealthConn
local function trackHealth(player)
	if currentHealthConn then
		currentHealthConn:Disconnect()
		currentHealthConn = nil
	end

	if not player or not player.Character then
		healthLabel.Text = "Health: N/A"
		distanceLabel.Text = "Distance: N/A"
		healthBarFill.Size = UDim2.new(0, 0, 1, 0)
		return
	end

	local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
	local function updateDistance()
		local myHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
		local targetHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
		if myHRP and targetHRP then
			local dist = (myHRP.Position - targetHRP.Position).Magnitude
			distanceLabel.Text = "Distance: " .. math.floor(dist) .. " studs"
		else
			distanceLabel.Text = "Distance: N/A"
		end
	end

	if humanoid then
		local function updateHealth()
			local health = math.max(0, math.min(humanoid.Health, humanoid.MaxHealth))
			local percent = health / humanoid.MaxHealth
			healthLabel.Text = "Health: " .. math.floor(health)
			healthBarFill.Size = UDim2.new(percent, 0, 1, 0)
			updateDistance()
		end

		updateHealth()
		currentHealthConn = humanoid:GetPropertyChangedSignal("Health"):Connect(updateHealth)
	else
		healthLabel.Text = "Health: N/A"
		distanceLabel.Text = "Distance: N/A"
		healthBarFill.Size = UDim2.new(0, 0, 1, 0)
	end
end

-- Headshot with distance check
local function shootHead(targetPlayer, gun)
	if not targetPlayer or not targetPlayer.Character then return warn("Invalid target") end
	local head = targetPlayer.Character:FindFirstChild("Head")
	local myHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
	local handle = gun and gun:FindFirstChild("Handle")
	if not (head and myHRP and handle) then
		return warn("Missing required parts")
	end

	local distance = (myHRP.Position - head.Position).Magnitude
	if distance > 120 then
		warn("Target too far: " .. math.floor(distance) .. " studs (Max: 120)")
		return
	end

	for i = 1, 25 do
		MainEvent:FireServer("ShootGun", handle, myHRP.Position, head.Position, head, Vector3.new(0, 0, -1))
		task.wait(0.03)
	end
end

-- Update on text input
targetBox:GetPropertyChangedSignal("Text"):Connect(function()
	local name = targetBox.Text
	local player = getTargetPlayer(name)
	trackHealth(player)
end)

-- Shoot button
shootButton.MouseButton1Click:Connect(function()
	local name = targetBox.Text
	if name == "" then return end
	local target = getTargetPlayer(name)
	local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
	if target and tool then
		shootHead(target, tool)
	else
		warn("Target or gun not found")
	end
end)

-- Auto update health and distance every 0.1 seconds
task.spawn(function()
	while true do
		task.wait(0.1)
		local name = targetBox.Text
		if name == "" then continue end

		local target = getTargetPlayer(name)
		if not target or not target.Character then
			healthLabel.Text = "Health: N/A"
			distanceLabel.Text = "Distance: N/A"
			healthBarFill.Size = UDim2.new(0, 0, 1, 0)
			continue
		end

		local humanoid = target.Character:FindFirstChildWhichIsA("Humanoid")
		local myHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
		local targetHRP = target.Character and target.Character:FindFirstChild("HumanoidRootPart")

		if humanoid then
			local health = math.max(0, math.min(humanoid.Health, humanoid.MaxHealth))
			local percent = health / humanoid.MaxHealth
			healthLabel.Text = "Health: " .. math.floor(health)
			healthBarFill.Size = UDim2.new(percent, 0, 1, 0)
		else
			healthLabel.Text = "Health: N/A"
			healthBarFill.Size = UDim2.new(0, 0, 1, 0)
		end

		if myHRP and targetHRP then
			local dist = (myHRP.Position - targetHRP.Position).Magnitude
			distanceLabel.Text = "Distance: " .. math.floor(dist) .. " studs"
		else
			distanceLabel.Text = "Distance: N/A"
		end
	end
end)
