local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

-- Dash settings
local speed = 8
local dashTime = 0.2
local cooldown = 0.5
local isCooldown = false
local dashAnimId = "rbxassetid://18537367238"
local dashSoundId = "rbxassetid://3084314259"

-- GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "DashGui"
screenGui.ResetOnSpawn = true -- Ensures GUI is removed on reset
screenGui.Parent = player:WaitForChild("PlayerGui")

local dashButton = Instance.new("TextButton")
dashButton.Size = UDim2.new(0, 120, 0, 50)
dashButton.Position = UDim2.new(1, -140, 1, -80)
dashButton.AnchorPoint = Vector2.new(0.5, 0.5)
dashButton.Text = "DASH"
dashButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
dashButton.TextColor3 = Color3.new(1, 1, 1)
dashButton.TextStrokeTransparency = 0
dashButton.TextStrokeColor3 = Color3.fromRGB(255, 165, 0)
dashButton.TextScaled = true
dashButton.Font = Enum.Font.GothamBold
dashButton.Parent = screenGui

Instance.new("UICorner", dashButton).CornerRadius = UDim.new(0, 12)
Instance.new("UIStroke", dashButton).Color = Color3.fromRGB(255, 165, 0)

-- Draggable GUI
local dragging = false
local dragStart, startPos

local function updateInput(input)
	local delta = input.Position - dragStart
	dashButton.Position = UDim2.new(
		startPos.X.Scale,
		startPos.X.Offset + delta.X,
		startPos.Y.Scale,
		startPos.Y.Offset + delta.Y
	)
end

dashButton.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = dashButton.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

dashButton.InputChanged:Connect(function(input)
	if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
		updateInput(input)
	end
end)

-- Dash Function
local function dash()
	if isCooldown then return end
	if not character or not hrp or not humanoid then return end

	isCooldown = true

	-- Animation
	local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
	local dashAnim = Instance.new("Animation")
	dashAnim.AnimationId = dashAnimId
	local track = animator:LoadAnimation(dashAnim)
	track:Play()

	-- Sound
	local dashSound = Instance.new("Sound")
	dashSound.SoundId = dashSoundId
	dashSound.Volume = 1
	dashSound.PlayOnRemove = true
	dashSound.Parent = hrp
	dashSound:Destroy()

	-- Dash Motion
	local connection
	connection = RunService.RenderStepped:Connect(function()
		local dir = humanoid.MoveDirection
		hrp.Velocity = (dir.Magnitude > 0 and dir or hrp.CFrame.LookVector) * (speed * 10)
	end)

	task.delay(dashTime, function()
		if connection then connection:Disconnect() end
		if track then track:Stop() end
	end)

	task.delay(cooldown, function()
		isCooldown = false
	end)
end

-- Input Listeners
dashButton.MouseButton1Click:Connect(dash)

UserInputService.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.X then
		dash()
	end
end)

-- Auto-destroy GUI/script on death
humanoid.Died:Connect(function()
	if screenGui then screenGui:Destroy() end
	if script then script:Destroy() end
end)
